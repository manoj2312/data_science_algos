'''
Created on Jun 2, 2014

@author: admin
'''

import csv
import sklearn
import string
import numpy
from scipy import stats
import matplotlib.pylab
from sklearn.decomposition import PCA
from scipy.stats.stats import pearsonr

with open('Mean_Reversion_strategy_data_PRICES.csv','rb') as f:
    rdr=csv.reader(f)
    k=[]
    for row in rdr:
        k.append(row)
  
  
  
for i in range(1,119):
    for j in range(1,1024):
        k[i][j]=float(k[i][j])
          
 
newk=k[1: ]
 
 
Matt=numpy.zeros([118,1023])
 
for j in range(118):                                                                                        #for j in range(118):
    Matt[j]=   (  newk[j][1:]-numpy.mean(newk[j][1:])  )/numpy.std(newk[j][1:])                             #    Matt[j]=newk[j][1:]
     
     
      
pca=PCA(n_components=118)
pca.fit(Matt.T)
 
Zo = pca.components_
 
 
# currmax=Zo[117][72]
# 
# for mip in range(5):
#     genmax=Zo[117][0]
#     for i in range(118):
#         if((Zo[117][i]<currmax)&(Zo[117][i]>genmax)):
#             genmax=Zo[117][i]
#     currmax=genmax
    
#72,mrf ;79,ofss ;16,bajajauto ;35,drreddy ;110,ultracemco 


#find=[0.00982101354347,0.0601137554237,0.0651137471616,0.00611288624845,0.0335923376911,0.137844957455,0.0128710583746,0.0114307736973,0.0965755467466,0.13789886409,0.0715721220597,0.0640002779335,0.0209853135889,0.253755629912,0.0487986075305,0.046067775813,0.00750420622159,0.0834342136439,0.00588835974279,0.341166236955,0.0152507707063,0.0588449090412,0.034688022029,0.00658469404769,0.0121365381706,0.0164714845599,0.012720842645,0.0299479912173,0.0364334072671,0.0104858916972,0.0378085430033,0.0320516855826,0.0527067651458,0.0318815440911,0.0705657241818,0.238256195348,0.0576765762581,0.115742226255,0.0121804419739,0.0276000066839,0.0211878836393,0.0310490294844,0.017563827818,0.454079968336,0.103985047507,0.0137576432459,0.0983251200915,0.0281005479117,0.0073042597714,0.0484848615171,0.124231310229,0.108800255748,0.0281551290625,0.0363046018354,0.0141860238053,0.00732827486581,0.0336159489519,0.0308730705749,0.0380441100207,0.0911587364171,0.0679027264143,0.000532496175121,0.397023896226,0.0275239052874,0.10609469777,0.0946631398204,0.00654939171923,0.00400155548931,0.00597701255104,0.112744628759,0.0503969185916,0.098256961659,0.0648281634189,0.00377132843805,0.0318652543675,0.0334157903608,0.0195988372804,0.0149040656945,0.0455901984264,0.00948198576225,0.0227354312024,0.00870897416175,0.0583152419224,0.127275592144,0.0118956994014,0.0239163743556,0.0418238764893,0.00772843307228,0.0145152792054,0.0176885295255,0.0162992915148,0.053898788251,0.0507454289059,0.00594694494991,0.0114659396389,0.0385090071293,0.039727973245,0.0860221444857,0.00614215146501,0.0711252046192,0.0239073964061,0.0278726074383,0.277918932856,0.0881453550113,0.0779527130205,0.061528448776,0.0235332630517,0.0250140233326,0.0106008840736,0.0198316619902,0.0174437026251,0.0484644063673,0.0930253294873,0.00364937858132,0.0031952237035,0.0509893884345,0.0239788500214,0.00702075502223,]
find=[0.00982101354347,0.0601137554237,0.0651137471616,0.00611288624845,0.0335923376911,0.137844957455,0.0128710583746,0.0114307736973,0.0965755467466,0.13789886409,0.0715721220597,0.0640002779335,0.0209853135889,0.253755629912,0.0487986075305,0.046067775813,0.00750420622159,0.0834342136439,0.00588835974279,0.341166236955,0.0152507707063,0.0588449090412,0.034688022029,0.00658469404769,0.0121365381706,0.0164714845599,0.012720842645,0.0299479912173,0.0364334072671,0.0104858916972,0.0378085430033,0.0320516855826,0.0527067651458,0.0318815440911,0.0705657241818,0.238256195348,0.0576765762581,0.115742226255,0.0121804419739,0.0276000066839,0.0211878836393,0.0310490294844,0.017563827818,0.454079968336,0.103985047507,0.0137576432459,0.0983251200915,0.0281005479117,0.0073042597714,0.0484848615171,0.124231310229,0.108800255748,0.0281551290625,0.0363046018354,0.0141860238053,0.00732827486581,0.0336159489519,0.0308730705749,0.0380441100207,0.0911587364171,0.0679027264143,1,0.397023896226,0.0275239052874,0.10609469777,0.0946631398204,0.00654939171923,0.00400155548931,0.00597701255104,0.112744628759,0.0503969185916,0.098256961659,0.0648281634189,0.00377132843805,0.0318652543675,0.0334157903608,0.0195988372804,0.0149040656945,0.0455901984264,0.00948198576225,0.0227354312024,0.00870897416175,0.0583152419224,0.127275592144,0.0118956994014,0.0239163743556,0.0418238764893,0.00772843307228,0.0145152792054,0.0176885295255,0.0162992915148,0.053898788251,0.0507454289059,0.00594694494991,0.0114659396389,0.0385090071293,0.039727973245,0.0860221444857,0.00614215146501,0.0711252046192,0.0239073964061,0.0278726074383,0.277918932856,0.0881453550113,0.0779527130205,0.061528448776,0.0235332630517,0.0250140233326,0.0106008840736,0.0198316619902,0.0174437026251,0.0484644063673,0.0930253294873,0.00364937858132,0.0031952237035,0.0509893884345,0.0239788500214,0.00702075502223,]

for i in range(118):
    if(find[i]==min(find)):
        print i
        print newk[i][0]
        print find[i]
        break
    

